{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# a)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 200,
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "import numpy as np"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 259,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Id</th>\n",
       "      <th>Score</th>\n",
       "      <th>Body</th>\n",
       "      <th>Title</th>\n",
       "      <th>Tags</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>0</td>\n",
       "      <td>476132</td>\n",
       "      <td>0</td>\n",
       "      <td>&lt;p&gt;&lt;strong&gt;Summarize the problem&lt;/strong&gt;&lt;/p&gt;\\...</td>\n",
       "      <td>What I do with the results extracted from lasso?</td>\n",
       "      <td>&lt;stata&gt;&lt;lasso&gt;</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>1</td>\n",
       "      <td>450811</td>\n",
       "      <td>0</td>\n",
       "      <td>&lt;p&gt;I try to calculate the marginal likelihood ...</td>\n",
       "      <td>the marginal likelihood of analytical result i...</td>\n",
       "      <td>&lt;sampling&gt;&lt;marginal-distribution&gt;&lt;rstan&gt;</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>2</td>\n",
       "      <td>472876</td>\n",
       "      <td>1</td>\n",
       "      <td>&lt;p&gt;I have a data set which involves 30 binomia...</td>\n",
       "      <td>GLMER Overdispersion and Error messages</td>\n",
       "      <td>&lt;lme4-nlme&gt;&lt;glmm&gt;&lt;eigenvalues&gt;&lt;overdispersion&gt;</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>3</td>\n",
       "      <td>470799</td>\n",
       "      <td>1</td>\n",
       "      <td>&lt;p&gt;It is well known that the K-means algorithm...</td>\n",
       "      <td>K-medoids: Is there any constraint about the c...</td>\n",
       "      <td>&lt;clustering&gt;&lt;k-medoids&gt;</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>4</td>\n",
       "      <td>446472</td>\n",
       "      <td>2</td>\n",
       "      <td>&lt;p&gt;I'm working on a text classification proble...</td>\n",
       "      <td>Combining XGBoost and LightGBM</td>\n",
       "      <td>&lt;python&gt;&lt;boosting&gt;</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "       Id  Score                                               Body  \\\n",
       "0  476132      0  <p><strong>Summarize the problem</strong></p>\\...   \n",
       "1  450811      0  <p>I try to calculate the marginal likelihood ...   \n",
       "2  472876      1  <p>I have a data set which involves 30 binomia...   \n",
       "3  470799      1  <p>It is well known that the K-means algorithm...   \n",
       "4  446472      2  <p>I'm working on a text classification proble...   \n",
       "\n",
       "                                               Title  \\\n",
       "0   What I do with the results extracted from lasso?   \n",
       "1  the marginal likelihood of analytical result i...   \n",
       "2            GLMER Overdispersion and Error messages   \n",
       "3  K-medoids: Is there any constraint about the c...   \n",
       "4                     Combining XGBoost and LightGBM   \n",
       "\n",
       "                                             Tags  \n",
       "0                                  <stata><lasso>  \n",
       "1        <sampling><marginal-distribution><rstan>  \n",
       "2  <lme4-nlme><glmm><eigenvalues><overdispersion>  \n",
       "3                         <clustering><k-medoids>  \n",
       "4                              <python><boosting>  "
      ]
     },
     "execution_count": 259,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "stack_train=pd.read_csv('stack_stats_2020_test.csv')\n",
    "stack_test=pd.read_csv('stack_stats_2020_train.csv')\n",
    "stack_train.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# i)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 260,
   "metadata": {},
   "outputs": [],
   "source": [
    "#importing beautiful soup\n",
    "from bs4 import BeautifulSoup"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# ii)\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# modifying body column"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 261,
   "metadata": {},
   "outputs": [],
   "source": [
    "#defining a function to extract text \n",
    "def get_texts(a):\n",
    "    soup = BeautifulSoup(a)\n",
    "    return soup.get_text()\n",
    "    \n",
    "#creating a new column in df\n",
    "stack_train['newbody']=stack_train['Body'].apply(get_texts)    "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 262,
   "metadata": {},
   "outputs": [],
   "source": [
    "#replacing '\\n' with space\n",
    "\n",
    "def replacement(a):\n",
    "    return a.replace('\\n',\" \")\n",
    "\n",
    "#creating a final body column\n",
    "stack_train['final_body']=stack_train['newbody'].apply(replacement)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# modifying Title column"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 263,
   "metadata": {},
   "outputs": [],
   "source": [
    "#extracting text\n",
    "stack_train['newtitle']=stack_train['Title'].apply(get_texts)    \n",
    "\n",
    "#replacing '\\n' with space\n",
    "stack_train['final_title']=stack_train['newtitle'].apply(replacement)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 264,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Id</th>\n",
       "      <th>final_body</th>\n",
       "      <th>final_title</th>\n",
       "      <th>final_tags</th>\n",
       "      <th>score&gt;=1</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>0</td>\n",
       "      <td>476132</td>\n",
       "      <td>Summarize the problem I have a dataset with pa...</td>\n",
       "      <td>What I do with the results extracted from lasso?</td>\n",
       "      <td>stata  lasso</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>1</td>\n",
       "      <td>450811</td>\n",
       "      <td>I try to calculate the marginal likelihood of ...</td>\n",
       "      <td>the marginal likelihood of analytical result i...</td>\n",
       "      <td>sampling  marginal-distribution  rstan</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>2</td>\n",
       "      <td>472876</td>\n",
       "      <td>I have a data set which involves 30 binomial a...</td>\n",
       "      <td>GLMER Overdispersion and Error messages</td>\n",
       "      <td>lme4-nlme  glmm  eigenvalues  overdispersion</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>3</td>\n",
       "      <td>470799</td>\n",
       "      <td>It is well known that the K-means algorithm is...</td>\n",
       "      <td>K-medoids: Is there any constraint about the c...</td>\n",
       "      <td>clustering  k-medoids</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>4</td>\n",
       "      <td>446472</td>\n",
       "      <td>I'm working on a text classification problem a...</td>\n",
       "      <td>Combining XGBoost and LightGBM</td>\n",
       "      <td>python  boosting</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "       Id                                         final_body  \\\n",
       "0  476132  Summarize the problem I have a dataset with pa...   \n",
       "1  450811  I try to calculate the marginal likelihood of ...   \n",
       "2  472876  I have a data set which involves 30 binomial a...   \n",
       "3  470799  It is well known that the K-means algorithm is...   \n",
       "4  446472  I'm working on a text classification problem a...   \n",
       "\n",
       "                                         final_title  \\\n",
       "0   What I do with the results extracted from lasso?   \n",
       "1  the marginal likelihood of analytical result i...   \n",
       "2            GLMER Overdispersion and Error messages   \n",
       "3  K-medoids: Is there any constraint about the c...   \n",
       "4                     Combining XGBoost and LightGBM   \n",
       "\n",
       "                                       final_tags  score>=1  \n",
       "0                                   stata  lasso          0  \n",
       "1         sampling  marginal-distribution  rstan          0  \n",
       "2   lme4-nlme  glmm  eigenvalues  overdispersion          1  \n",
       "3                          clustering  k-medoids          1  \n",
       "4                               python  boosting          1  "
      ]
     },
     "execution_count": 264,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#modifying tags\n",
    "def replacement2(a):\n",
    "    a=a.replace('<',\" \")\n",
    "    a=a.replace('>',\" \")\n",
    "    \n",
    "    return a\n",
    "\n",
    "stack_train['final_tags']=stack_train['Tags'].apply(replacement2)\n",
    "\n",
    "\n",
    "#modifying scores\n",
    "\n",
    "def greaterthanone(a):\n",
    "    if a>=1:\n",
    "        return 1\n",
    "    else:\n",
    "        return 0\n",
    "\n",
    "stack_train['score>=1']=stack_train['Score'].apply(greaterthanone)\n",
    "\n",
    "#dropping not needed columns\n",
    "stack_train_new=stack_train.drop(['Tags','Body','Title','newbody','newtitle'],1)\n",
    "\n",
    "stack_train_new.head()\n",
    "\n",
    "#dropping not needed columns\n",
    "stack_train_new=stack_train.drop(['Score','Tags','Body','Title','newbody','newtitle'],1)\n",
    "\n",
    "stack_train_new.head()\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# iv)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 265,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "0    4226\n",
      "1    4023\n",
      "Name: score>=1, dtype: int64\n"
     ]
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "#visualizing Y\n",
    "\n",
    "import seaborn as sns\n",
    "\n",
    "sns.countplot(stack_train_new['score>=1'], order=stack_train_new['score>=1'].value_counts().index);\n",
    "print(stack_train_new['score>=1'].value_counts());\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# BASIC TEXT CLEANING"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 266,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Id</th>\n",
       "      <th>final_body</th>\n",
       "      <th>final_title</th>\n",
       "      <th>final_tags</th>\n",
       "      <th>score&gt;=1</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>0</td>\n",
       "      <td>476132</td>\n",
       "      <td>summarize the problem i have a dataset with pa...</td>\n",
       "      <td>what i do with the results extracted from lasso?</td>\n",
       "      <td>stata  lasso</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>1</td>\n",
       "      <td>450811</td>\n",
       "      <td>i try to calculate the marginal likelihood of ...</td>\n",
       "      <td>the marginal likelihood of analytical result i...</td>\n",
       "      <td>sampling  marginal-distribution  rstan</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>2</td>\n",
       "      <td>472876</td>\n",
       "      <td>i have a data set which involves 30 binomial a...</td>\n",
       "      <td>glmer overdispersion and error messages</td>\n",
       "      <td>lme4-nlme  glmm  eigenvalues  overdispersion</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>3</td>\n",
       "      <td>470799</td>\n",
       "      <td>it is well known that the k-means algorithm is...</td>\n",
       "      <td>k-medoids: is there any constraint about the c...</td>\n",
       "      <td>clustering  k-medoids</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>4</td>\n",
       "      <td>446472</td>\n",
       "      <td>i'm working on a text classification problem a...</td>\n",
       "      <td>combining xgboost and lightgbm</td>\n",
       "      <td>python  boosting</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "       Id                                         final_body  \\\n",
       "0  476132  summarize the problem i have a dataset with pa...   \n",
       "1  450811  i try to calculate the marginal likelihood of ...   \n",
       "2  472876  i have a data set which involves 30 binomial a...   \n",
       "3  470799  it is well known that the k-means algorithm is...   \n",
       "4  446472  i'm working on a text classification problem a...   \n",
       "\n",
       "                                         final_title  \\\n",
       "0   what i do with the results extracted from lasso?   \n",
       "1  the marginal likelihood of analytical result i...   \n",
       "2            glmer overdispersion and error messages   \n",
       "3  k-medoids: is there any constraint about the c...   \n",
       "4                     combining xgboost and lightgbm   \n",
       "\n",
       "                                       final_tags  score>=1  \n",
       "0                                   stata  lasso          0  \n",
       "1         sampling  marginal-distribution  rstan          0  \n",
       "2   lme4-nlme  glmm  eigenvalues  overdispersion          1  \n",
       "3                          clustering  k-medoids          1  \n",
       "4                               python  boosting          1  "
      ]
     },
     "execution_count": 266,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Change to Lowercase\n",
    "\n",
    "stack_train_new['final_body']=stack_train_new['final_body'].apply(str.lower)\n",
    "stack_train_new['final_title']=stack_train_new['final_title'].apply(str.lower)\n",
    "stack_train_new['final_tags']=stack_train_new['final_tags'].apply(str.lower)\n",
    "stack_train_new.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 267,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Id</th>\n",
       "      <th>final_body</th>\n",
       "      <th>final_title</th>\n",
       "      <th>final_tags</th>\n",
       "      <th>score&gt;=1</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>0</td>\n",
       "      <td>476132</td>\n",
       "      <td>summarize the problem i have a dataset with pa...</td>\n",
       "      <td>what i do with the results extracted from lasso</td>\n",
       "      <td>stata  lasso</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>1</td>\n",
       "      <td>450811</td>\n",
       "      <td>i try to calculate the marginal likelihood of ...</td>\n",
       "      <td>the marginal likelihood of analytical result i...</td>\n",
       "      <td>sampling  marginaldistribution  rstan</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>2</td>\n",
       "      <td>472876</td>\n",
       "      <td>i have a data set which involves 30 binomial a...</td>\n",
       "      <td>glmer overdispersion and error messages</td>\n",
       "      <td>lme4nlme  glmm  eigenvalues  overdispersion</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>3</td>\n",
       "      <td>470799</td>\n",
       "      <td>it is well known that the kmeans algorithm is ...</td>\n",
       "      <td>kmedoids is there any constraint about the cho...</td>\n",
       "      <td>clustering  kmedoids</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>4</td>\n",
       "      <td>446472</td>\n",
       "      <td>im working on a text classification problem an...</td>\n",
       "      <td>combining xgboost and lightgbm</td>\n",
       "      <td>python  boosting</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "       Id                                         final_body  \\\n",
       "0  476132  summarize the problem i have a dataset with pa...   \n",
       "1  450811  i try to calculate the marginal likelihood of ...   \n",
       "2  472876  i have a data set which involves 30 binomial a...   \n",
       "3  470799  it is well known that the kmeans algorithm is ...   \n",
       "4  446472  im working on a text classification problem an...   \n",
       "\n",
       "                                         final_title  \\\n",
       "0    what i do with the results extracted from lasso   \n",
       "1  the marginal likelihood of analytical result i...   \n",
       "2            glmer overdispersion and error messages   \n",
       "3  kmedoids is there any constraint about the cho...   \n",
       "4                     combining xgboost and lightgbm   \n",
       "\n",
       "                                      final_tags  score>=1  \n",
       "0                                  stata  lasso          0  \n",
       "1         sampling  marginaldistribution  rstan          0  \n",
       "2   lme4nlme  glmm  eigenvalues  overdispersion          1  \n",
       "3                          clustering  kmedoids          1  \n",
       "4                              python  boosting          1  "
      ]
     },
     "execution_count": 267,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#removing puncutations\n",
    "\n",
    "from string import punctuation\n",
    "\n",
    "def remove_punctuation(document):\n",
    "\n",
    "    no_punct = ''.join([character for character in document if character not in punctuation])\n",
    "    \n",
    "    return no_punct\n",
    "\n",
    "stack_train_new['final_body']=stack_train_new['final_body'].apply(remove_punctuation)\n",
    "stack_train_new['final_title']=stack_train_new['final_title'].apply(remove_punctuation)\n",
    "stack_train_new['final_tags']=stack_train_new['final_tags'].apply(remove_punctuation)\n",
    "stack_train_new.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 268,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Id</th>\n",
       "      <th>final_body</th>\n",
       "      <th>final_title</th>\n",
       "      <th>final_tags</th>\n",
       "      <th>score&gt;=1</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>0</td>\n",
       "      <td>476132</td>\n",
       "      <td>summarize the problem i have a dataset with pa...</td>\n",
       "      <td>what i do with the results extracted from lasso</td>\n",
       "      <td>stata  lasso</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>1</td>\n",
       "      <td>450811</td>\n",
       "      <td>i try to calculate the marginal likelihood of ...</td>\n",
       "      <td>the marginal likelihood of analytical result i...</td>\n",
       "      <td>sampling  marginaldistribution  rstan</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>2</td>\n",
       "      <td>472876</td>\n",
       "      <td>i have a data set which involves  binomial abs...</td>\n",
       "      <td>glmer overdispersion and error messages</td>\n",
       "      <td>lmenlme  glmm  eigenvalues  overdispersion</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>3</td>\n",
       "      <td>470799</td>\n",
       "      <td>it is well known that the kmeans algorithm is ...</td>\n",
       "      <td>kmedoids is there any constraint about the cho...</td>\n",
       "      <td>clustering  kmedoids</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>4</td>\n",
       "      <td>446472</td>\n",
       "      <td>im working on a text classification problem an...</td>\n",
       "      <td>combining xgboost and lightgbm</td>\n",
       "      <td>python  boosting</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "       Id                                         final_body  \\\n",
       "0  476132  summarize the problem i have a dataset with pa...   \n",
       "1  450811  i try to calculate the marginal likelihood of ...   \n",
       "2  472876  i have a data set which involves  binomial abs...   \n",
       "3  470799  it is well known that the kmeans algorithm is ...   \n",
       "4  446472  im working on a text classification problem an...   \n",
       "\n",
       "                                         final_title  \\\n",
       "0    what i do with the results extracted from lasso   \n",
       "1  the marginal likelihood of analytical result i...   \n",
       "2            glmer overdispersion and error messages   \n",
       "3  kmedoids is there any constraint about the cho...   \n",
       "4                     combining xgboost and lightgbm   \n",
       "\n",
       "                                     final_tags  score>=1  \n",
       "0                                 stata  lasso          0  \n",
       "1        sampling  marginaldistribution  rstan          0  \n",
       "2   lmenlme  glmm  eigenvalues  overdispersion          1  \n",
       "3                         clustering  kmedoids          1  \n",
       "4                             python  boosting          1  "
      ]
     },
     "execution_count": 268,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#removing digits\n",
    "\n",
    "def remove_digit(document): \n",
    "    \n",
    "    no_digit = ''.join([character for character in document if not character.isdigit()])\n",
    "              \n",
    "    return no_digit\n",
    "\n",
    "stack_train_new['final_body']=stack_train_new['final_body'].apply(remove_digit)\n",
    "stack_train_new['final_title']=stack_train_new['final_title'].apply(remove_digit)\n",
    "stack_train_new['final_tags']=stack_train_new['final_tags'].apply(remove_digit)\n",
    "stack_train_new.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 269,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Id</th>\n",
       "      <th>final_body</th>\n",
       "      <th>final_title</th>\n",
       "      <th>final_tags</th>\n",
       "      <th>score&gt;=1</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>0</td>\n",
       "      <td>476132</td>\n",
       "      <td>[summarize, the, problem, i, have, a, dataset,...</td>\n",
       "      <td>[what, i, do, with, the, results, extracted, f...</td>\n",
       "      <td>[stata, lasso]</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>1</td>\n",
       "      <td>450811</td>\n",
       "      <td>[i, try, to, calculate, the, marginal, likelih...</td>\n",
       "      <td>[the, marginal, likelihood, of, analytical, re...</td>\n",
       "      <td>[sampling, marginaldistribution, rstan]</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>2</td>\n",
       "      <td>472876</td>\n",
       "      <td>[i, have, a, data, set, which, involves, binom...</td>\n",
       "      <td>[glmer, overdispersion, and, error, messages]</td>\n",
       "      <td>[lmenlme, glmm, eigenvalues, overdispersion]</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>3</td>\n",
       "      <td>470799</td>\n",
       "      <td>[it, is, well, known, that, the, kmeans, algor...</td>\n",
       "      <td>[kmedoids, is, there, any, constraint, about, ...</td>\n",
       "      <td>[clustering, kmedoids]</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>4</td>\n",
       "      <td>446472</td>\n",
       "      <td>[im, working, on, a, text, classification, pro...</td>\n",
       "      <td>[combining, xgboost, and, lightgbm]</td>\n",
       "      <td>[python, boosting]</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "       Id                                         final_body  \\\n",
       "0  476132  [summarize, the, problem, i, have, a, dataset,...   \n",
       "1  450811  [i, try, to, calculate, the, marginal, likelih...   \n",
       "2  472876  [i, have, a, data, set, which, involves, binom...   \n",
       "3  470799  [it, is, well, known, that, the, kmeans, algor...   \n",
       "4  446472  [im, working, on, a, text, classification, pro...   \n",
       "\n",
       "                                         final_title  \\\n",
       "0  [what, i, do, with, the, results, extracted, f...   \n",
       "1  [the, marginal, likelihood, of, analytical, re...   \n",
       "2      [glmer, overdispersion, and, error, messages]   \n",
       "3  [kmedoids, is, there, any, constraint, about, ...   \n",
       "4                [combining, xgboost, and, lightgbm]   \n",
       "\n",
       "                                     final_tags  score>=1  \n",
       "0                                [stata, lasso]         0  \n",
       "1       [sampling, marginaldistribution, rstan]         0  \n",
       "2  [lmenlme, glmm, eigenvalues, overdispersion]         1  \n",
       "3                        [clustering, kmedoids]         1  \n",
       "4                            [python, boosting]         1  "
      ]
     },
     "execution_count": 269,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "### Tokenization \n",
    "\n",
    "import nltk\n",
    "#nltk.download('punkt')\n",
    "\n",
    "from nltk.tokenize import word_tokenize\n",
    "\n",
    "stack_train_new['final_body']=stack_train_new['final_body'].apply(word_tokenize)\n",
    "stack_train_new['final_title']=stack_train_new['final_title'].apply(word_tokenize)\n",
    "stack_train_new['final_tags']=stack_train_new['final_tags'].apply(word_tokenize)\n",
    "stack_train_new.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 270,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[nltk_data] Downloading package stopwords to\n",
      "[nltk_data]     /Users/shivangimantri/nltk_data...\n",
      "[nltk_data]   Package stopwords is already up-to-date!\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Id</th>\n",
       "      <th>final_body</th>\n",
       "      <th>final_title</th>\n",
       "      <th>final_tags</th>\n",
       "      <th>score&gt;=1</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>0</td>\n",
       "      <td>476132</td>\n",
       "      <td>[summarize, problem, dataset, panel, data, try...</td>\n",
       "      <td>[results, extracted, lasso]</td>\n",
       "      <td>[stata, lasso]</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>1</td>\n",
       "      <td>450811</td>\n",
       "      <td>[try, calculate, marginal, likelihood, example...</td>\n",
       "      <td>[marginal, likelihood, analytical, result, dif...</td>\n",
       "      <td>[sampling, marginaldistribution, rstan]</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>2</td>\n",
       "      <td>472876</td>\n",
       "      <td>[data, set, involves, binomial, absencepresenc...</td>\n",
       "      <td>[glmer, overdispersion, error, messages]</td>\n",
       "      <td>[lmenlme, glmm, eigenvalues, overdispersion]</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>3</td>\n",
       "      <td>470799</td>\n",
       "      <td>[well, known, kmeans, algorithm, well, designe...</td>\n",
       "      <td>[kmedoids, constraint, choice, distance]</td>\n",
       "      <td>[clustering, kmedoids]</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>4</td>\n",
       "      <td>446472</td>\n",
       "      <td>[im, working, text, classification, problem, c...</td>\n",
       "      <td>[combining, xgboost, lightgbm]</td>\n",
       "      <td>[python, boosting]</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "       Id                                         final_body  \\\n",
       "0  476132  [summarize, problem, dataset, panel, data, try...   \n",
       "1  450811  [try, calculate, marginal, likelihood, example...   \n",
       "2  472876  [data, set, involves, binomial, absencepresenc...   \n",
       "3  470799  [well, known, kmeans, algorithm, well, designe...   \n",
       "4  446472  [im, working, text, classification, problem, c...   \n",
       "\n",
       "                                         final_title  \\\n",
       "0                        [results, extracted, lasso]   \n",
       "1  [marginal, likelihood, analytical, result, dif...   \n",
       "2           [glmer, overdispersion, error, messages]   \n",
       "3           [kmedoids, constraint, choice, distance]   \n",
       "4                     [combining, xgboost, lightgbm]   \n",
       "\n",
       "                                     final_tags  score>=1  \n",
       "0                                [stata, lasso]         0  \n",
       "1       [sampling, marginaldistribution, rstan]         0  \n",
       "2  [lmenlme, glmm, eigenvalues, overdispersion]         1  \n",
       "3                        [clustering, kmedoids]         1  \n",
       "4                            [python, boosting]         1  "
      ]
     },
     "execution_count": 270,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "### Remove Stopwords\n",
    "nltk.download('stopwords')\n",
    "from nltk.corpus import stopwords\n",
    "\n",
    "stop_words = set(stopwords.words('english'))\n",
    "\n",
    "def remove_stopwords(document):\n",
    "    \n",
    "    words = [word for word in document if not word in stop_words]\n",
    "    \n",
    "    return words\n",
    "\n",
    "\n",
    "stack_train_new['final_body']=stack_train_new['final_body'].apply(remove_stopwords)\n",
    "stack_train_new['final_title']=stack_train_new['final_title'].apply(remove_stopwords)\n",
    "stack_train_new['final_tags']=stack_train_new['final_tags'].apply(remove_stopwords)\n",
    "stack_train_new.head()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 271,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Id</th>\n",
       "      <th>final_body</th>\n",
       "      <th>final_title</th>\n",
       "      <th>final_tags</th>\n",
       "      <th>score&gt;=1</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>0</td>\n",
       "      <td>476132</td>\n",
       "      <td>[summar, problem, dataset, panel, data, tri, m...</td>\n",
       "      <td>[result, extract, lasso]</td>\n",
       "      <td>[stata, lasso]</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>1</td>\n",
       "      <td>450811</td>\n",
       "      <td>[tri, calcul, margin, likelihood, exampl, arti...</td>\n",
       "      <td>[margin, likelihood, analyt, result, differ, b...</td>\n",
       "      <td>[sampl, marginaldistribut, rstan]</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>2</td>\n",
       "      <td>472876</td>\n",
       "      <td>[data, set, involv, binomi, absencepres, total...</td>\n",
       "      <td>[glmer, overdispers, error, messag]</td>\n",
       "      <td>[lmenlm, glmm, eigenvalu, overdispers]</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>3</td>\n",
       "      <td>470799</td>\n",
       "      <td>[well, known, kmean, algorithm, well, design, ...</td>\n",
       "      <td>[kmedoid, constraint, choic, distanc]</td>\n",
       "      <td>[cluster, kmedoid]</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>4</td>\n",
       "      <td>446472</td>\n",
       "      <td>[im, work, text, classif, problem, compar, lig...</td>\n",
       "      <td>[combin, xgboost, lightgbm]</td>\n",
       "      <td>[python, boost]</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "       Id                                         final_body  \\\n",
       "0  476132  [summar, problem, dataset, panel, data, tri, m...   \n",
       "1  450811  [tri, calcul, margin, likelihood, exampl, arti...   \n",
       "2  472876  [data, set, involv, binomi, absencepres, total...   \n",
       "3  470799  [well, known, kmean, algorithm, well, design, ...   \n",
       "4  446472  [im, work, text, classif, problem, compar, lig...   \n",
       "\n",
       "                                         final_title  \\\n",
       "0                           [result, extract, lasso]   \n",
       "1  [margin, likelihood, analyt, result, differ, b...   \n",
       "2                [glmer, overdispers, error, messag]   \n",
       "3              [kmedoid, constraint, choic, distanc]   \n",
       "4                        [combin, xgboost, lightgbm]   \n",
       "\n",
       "                               final_tags  score>=1  \n",
       "0                          [stata, lasso]         0  \n",
       "1       [sampl, marginaldistribut, rstan]         0  \n",
       "2  [lmenlm, glmm, eigenvalu, overdispers]         1  \n",
       "3                      [cluster, kmedoid]         1  \n",
       "4                         [python, boost]         1  "
      ]
     },
     "execution_count": 271,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#stemming\n",
    "\n",
    "from nltk.stem import PorterStemmer\n",
    "\n",
    "porter = PorterStemmer()\n",
    "\n",
    "def stemmer(document):\n",
    "    \n",
    "    stemmed_document = [porter.stem(word) for word in document]\n",
    "    \n",
    "    return stemmed_document\n",
    "\n",
    "stack_train_new['final_body']=stack_train_new['final_body'].apply(stemmer)\n",
    "stack_train_new['final_title']=stack_train_new['final_title'].apply(stemmer)\n",
    "stack_train_new['final_tags']=stack_train_new['final_tags'].apply(stemmer)\n",
    "stack_train_new.head()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 272,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Id</th>\n",
       "      <th>final_body</th>\n",
       "      <th>final_title</th>\n",
       "      <th>final_tags</th>\n",
       "      <th>score&gt;=1</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>0</td>\n",
       "      <td>476132</td>\n",
       "      <td>[summar_body, problem_body, dataset_body, pane...</td>\n",
       "      <td>[result_title, extract_title, lasso_title]</td>\n",
       "      <td>[stata_tag, lasso_tag]</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>1</td>\n",
       "      <td>450811</td>\n",
       "      <td>[tri_body, calcul_body, margin_body, likelihoo...</td>\n",
       "      <td>[margin_title, likelihood_title, analyt_title,...</td>\n",
       "      <td>[sampl_tag, marginaldistribut_tag, rstan_tag]</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>2</td>\n",
       "      <td>472876</td>\n",
       "      <td>[data_body, set_body, involv_body, binomi_body...</td>\n",
       "      <td>[glmer_title, overdispers_title, error_title, ...</td>\n",
       "      <td>[lmenlm_tag, glmm_tag, eigenvalu_tag, overdisp...</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>3</td>\n",
       "      <td>470799</td>\n",
       "      <td>[well_body, known_body, kmean_body, algorithm_...</td>\n",
       "      <td>[kmedoid_title, constraint_title, choic_title,...</td>\n",
       "      <td>[cluster_tag, kmedoid_tag]</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>4</td>\n",
       "      <td>446472</td>\n",
       "      <td>[im_body, work_body, text_body, classif_body, ...</td>\n",
       "      <td>[combin_title, xgboost_title, lightgbm_title]</td>\n",
       "      <td>[python_tag, boost_tag]</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "       Id                                         final_body  \\\n",
       "0  476132  [summar_body, problem_body, dataset_body, pane...   \n",
       "1  450811  [tri_body, calcul_body, margin_body, likelihoo...   \n",
       "2  472876  [data_body, set_body, involv_body, binomi_body...   \n",
       "3  470799  [well_body, known_body, kmean_body, algorithm_...   \n",
       "4  446472  [im_body, work_body, text_body, classif_body, ...   \n",
       "\n",
       "                                         final_title  \\\n",
       "0         [result_title, extract_title, lasso_title]   \n",
       "1  [margin_title, likelihood_title, analyt_title,...   \n",
       "2  [glmer_title, overdispers_title, error_title, ...   \n",
       "3  [kmedoid_title, constraint_title, choic_title,...   \n",
       "4      [combin_title, xgboost_title, lightgbm_title]   \n",
       "\n",
       "                                          final_tags  score>=1  \n",
       "0                             [stata_tag, lasso_tag]         0  \n",
       "1      [sampl_tag, marginaldistribut_tag, rstan_tag]         0  \n",
       "2  [lmenlm_tag, glmm_tag, eigenvalu_tag, overdisp...         1  \n",
       "3                         [cluster_tag, kmedoid_tag]         1  \n",
       "4                            [python_tag, boost_tag]         1  "
      ]
     },
     "execution_count": 272,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#adding suffix for title, tag, body\n",
    "\n",
    "\n",
    "def appender_body(document):\n",
    "    \n",
    "    appended_doc = [(word+'_body') for word in document]\n",
    "    \n",
    "    return appended_doc\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "def appender_title(document):\n",
    "    \n",
    "    appended_doc = [(word+'_title') for word in document]\n",
    "    \n",
    "    return appended_doc\n",
    "\n",
    "def appender_tag(document):\n",
    "    \n",
    "    appended_doc = [(word+'_tag') for word in document]\n",
    "    \n",
    "    return appended_doc\n",
    "\n",
    "stack_train_new['final_body']=stack_train_new['final_body'].apply(appender_body)\n",
    "stack_train_new['final_title']=stack_train_new['final_title'].apply(appender_title)\n",
    "stack_train_new['final_tags']=stack_train_new['final_tags'].apply(appender_tag)\n",
    "\n",
    "stack_train_new.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# THE DOCUMENT-TERM MATRIX"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 273,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Id</th>\n",
       "      <th>final_body</th>\n",
       "      <th>final_title</th>\n",
       "      <th>final_tags</th>\n",
       "      <th>score&gt;=1</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>0</td>\n",
       "      <td>476132</td>\n",
       "      <td>summar_body problem_body dataset_body panel_bo...</td>\n",
       "      <td>result_title extract_title lasso_title</td>\n",
       "      <td>stata_tag lasso_tag</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>1</td>\n",
       "      <td>450811</td>\n",
       "      <td>tri_body calcul_body margin_body likelihood_bo...</td>\n",
       "      <td>margin_title likelihood_title analyt_title res...</td>\n",
       "      <td>sampl_tag marginaldistribut_tag rstan_tag</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>2</td>\n",
       "      <td>472876</td>\n",
       "      <td>data_body set_body involv_body binomi_body abs...</td>\n",
       "      <td>glmer_title overdispers_title error_title mess...</td>\n",
       "      <td>lmenlm_tag glmm_tag eigenvalu_tag overdispers_tag</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>3</td>\n",
       "      <td>470799</td>\n",
       "      <td>well_body known_body kmean_body algorithm_body...</td>\n",
       "      <td>kmedoid_title constraint_title choic_title dis...</td>\n",
       "      <td>cluster_tag kmedoid_tag</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>4</td>\n",
       "      <td>446472</td>\n",
       "      <td>im_body work_body text_body classif_body probl...</td>\n",
       "      <td>combin_title xgboost_title lightgbm_title</td>\n",
       "      <td>python_tag boost_tag</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "       Id                                         final_body  \\\n",
       "0  476132  summar_body problem_body dataset_body panel_bo...   \n",
       "1  450811  tri_body calcul_body margin_body likelihood_bo...   \n",
       "2  472876  data_body set_body involv_body binomi_body abs...   \n",
       "3  470799  well_body known_body kmean_body algorithm_body...   \n",
       "4  446472  im_body work_body text_body classif_body probl...   \n",
       "\n",
       "                                         final_title  \\\n",
       "0             result_title extract_title lasso_title   \n",
       "1  margin_title likelihood_title analyt_title res...   \n",
       "2  glmer_title overdispers_title error_title mess...   \n",
       "3  kmedoid_title constraint_title choic_title dis...   \n",
       "4          combin_title xgboost_title lightgbm_title   \n",
       "\n",
       "                                          final_tags  score>=1  \n",
       "0                                stata_tag lasso_tag         0  \n",
       "1          sampl_tag marginaldistribut_tag rstan_tag         0  \n",
       "2  lmenlm_tag glmm_tag eigenvalu_tag overdispers_tag         1  \n",
       "3                            cluster_tag kmedoid_tag         1  \n",
       "4                               python_tag boost_tag         1  "
      ]
     },
     "execution_count": 273,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Detokenization\n",
    "from nltk.tokenize.treebank import TreebankWordDetokenizer\n",
    "\n",
    "stack_train_new['final_body']=stack_train_new['final_body'].apply(TreebankWordDetokenizer().detokenize)\n",
    "stack_train_new['final_title']=stack_train_new['final_title'].apply(TreebankWordDetokenizer().detokenize)\n",
    "stack_train_new['final_tags']=stack_train_new['final_tags'].apply(TreebankWordDetokenizer().detokenize)\n",
    "\n",
    "stack_train_new.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 276,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Id</th>\n",
       "      <th>final_body</th>\n",
       "      <th>final_title</th>\n",
       "      <th>final_tags</th>\n",
       "      <th>score&gt;=1</th>\n",
       "      <th>text</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>0</td>\n",
       "      <td>476132</td>\n",
       "      <td>summar_body problem_body dataset_body panel_bo...</td>\n",
       "      <td>result_title extract_title lasso_title</td>\n",
       "      <td>stata_tag lasso_tag</td>\n",
       "      <td>0</td>\n",
       "      <td>stata_tag lasso_tag result_title extract_title...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>1</td>\n",
       "      <td>450811</td>\n",
       "      <td>tri_body calcul_body margin_body likelihood_bo...</td>\n",
       "      <td>margin_title likelihood_title analyt_title res...</td>\n",
       "      <td>sampl_tag marginaldistribut_tag rstan_tag</td>\n",
       "      <td>0</td>\n",
       "      <td>sampl_tag marginaldistribut_tag rstan_tag marg...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>2</td>\n",
       "      <td>472876</td>\n",
       "      <td>data_body set_body involv_body binomi_body abs...</td>\n",
       "      <td>glmer_title overdispers_title error_title mess...</td>\n",
       "      <td>lmenlm_tag glmm_tag eigenvalu_tag overdispers_tag</td>\n",
       "      <td>1</td>\n",
       "      <td>lmenlm_tag glmm_tag eigenvalu_tag overdispers_...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>3</td>\n",
       "      <td>470799</td>\n",
       "      <td>well_body known_body kmean_body algorithm_body...</td>\n",
       "      <td>kmedoid_title constraint_title choic_title dis...</td>\n",
       "      <td>cluster_tag kmedoid_tag</td>\n",
       "      <td>1</td>\n",
       "      <td>cluster_tag kmedoid_tag kmedoid_title constrai...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>4</td>\n",
       "      <td>446472</td>\n",
       "      <td>im_body work_body text_body classif_body probl...</td>\n",
       "      <td>combin_title xgboost_title lightgbm_title</td>\n",
       "      <td>python_tag boost_tag</td>\n",
       "      <td>1</td>\n",
       "      <td>python_tag boost_tag combin_title xgboost_titl...</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "       Id                                         final_body  \\\n",
       "0  476132  summar_body problem_body dataset_body panel_bo...   \n",
       "1  450811  tri_body calcul_body margin_body likelihood_bo...   \n",
       "2  472876  data_body set_body involv_body binomi_body abs...   \n",
       "3  470799  well_body known_body kmean_body algorithm_body...   \n",
       "4  446472  im_body work_body text_body classif_body probl...   \n",
       "\n",
       "                                         final_title  \\\n",
       "0             result_title extract_title lasso_title   \n",
       "1  margin_title likelihood_title analyt_title res...   \n",
       "2  glmer_title overdispers_title error_title mess...   \n",
       "3  kmedoid_title constraint_title choic_title dis...   \n",
       "4          combin_title xgboost_title lightgbm_title   \n",
       "\n",
       "                                          final_tags  score>=1  \\\n",
       "0                                stata_tag lasso_tag         0   \n",
       "1          sampl_tag marginaldistribut_tag rstan_tag         0   \n",
       "2  lmenlm_tag glmm_tag eigenvalu_tag overdispers_tag         1   \n",
       "3                            cluster_tag kmedoid_tag         1   \n",
       "4                               python_tag boost_tag         1   \n",
       "\n",
       "                                                text  \n",
       "0  stata_tag lasso_tag result_title extract_title...  \n",
       "1  sampl_tag marginaldistribut_tag rstan_tag marg...  \n",
       "2  lmenlm_tag glmm_tag eigenvalu_tag overdispers_...  \n",
       "3  cluster_tag kmedoid_tag kmedoid_title constrai...  \n",
       "4  python_tag boost_tag combin_title xgboost_titl...  "
      ]
     },
     "execution_count": 276,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#combining three columns into 1\n",
    "\n",
    "stack_train_new['text']=stack_train_new['final_tags']+ ' ' +stack_train_new['final_title']+ \" \"+ stack_train_new['final_body']\n",
    "stack_train_new.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 277,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<8249x52614 sparse matrix of type '<class 'numpy.int64'>'\n",
       "\twith 521362 stored elements in Compressed Sparse Row format>"
      ]
     },
     "execution_count": 277,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Document-term Matrix\n",
    "\n",
    "from sklearn.feature_extraction.text import CountVectorizer\n",
    "\n",
    "countvec = CountVectorizer()\n",
    "\n",
    "sparse_dtm = countvec.fit_transform(stack_train_new['text'])\n",
    "sparse_dtm\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 278,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/Users/shivangimantri/opt/anaconda3/lib/python3.7/site-packages/sklearn/utils/deprecation.py:87: FutureWarning: Function get_feature_names is deprecated; get_feature_names is deprecated in 1.0 and will be removed in 1.2. Please use get_feature_names_out instead.\n",
      "  warnings.warn(msg, category=FutureWarning)\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>_body</th>\n",
       "      <th>_title</th>\n",
       "      <th>aa_body</th>\n",
       "      <th>aa_title</th>\n",
       "      <th>aaa_body</th>\n",
       "      <th>aaaa_body</th>\n",
       "      <th>aaaaa_body</th>\n",
       "      <th>aaaan_body</th>\n",
       "      <th>aaai_body</th>\n",
       "      <th>aaam_body</th>\n",
       "      <th>...</th>\n",
       "      <th>ϵsupport_body</th>\n",
       "      <th>ϵsvr_body</th>\n",
       "      <th>ϵt</th>\n",
       "      <th>ϵtube_body</th>\n",
       "      <th>нow_body</th>\n",
       "      <th>ℎ_body</th>\n",
       "      <th>ﬁnd_body</th>\n",
       "      <th>ﬁt_body</th>\n",
       "      <th>ﬁt_title</th>\n",
       "      <th>ﬁve_body</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>3</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>4</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>8244</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>8245</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>8246</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>8247</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>8248</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>8249 rows × 52614 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "      _body  _title  aa_body  aa_title  aaa_body  aaaa_body  aaaaa_body  \\\n",
       "0         0       0        0         0         0          0           0   \n",
       "1         2       0        0         0         0          0           0   \n",
       "2         0       0        0         0         0          0           0   \n",
       "3         0       0        0         0         0          0           0   \n",
       "4         0       0        0         0         0          0           0   \n",
       "...     ...     ...      ...       ...       ...        ...         ...   \n",
       "8244      0       0        0         0         0          0           0   \n",
       "8245      0       0        1         0         0          0           0   \n",
       "8246      0       0        0         0         0          0           0   \n",
       "8247      0       0        0         0         0          0           0   \n",
       "8248      0       0        0         0         0          0           0   \n",
       "\n",
       "      aaaan_body  aaai_body  aaam_body  ...  ϵsupport_body  ϵsvr_body  ϵt  \\\n",
       "0              0          0          0  ...              0          0   0   \n",
       "1              0          0          0  ...              0          0   0   \n",
       "2              0          0          0  ...              0          0   0   \n",
       "3              0          0          0  ...              0          0   0   \n",
       "4              0          0          0  ...              0          0   0   \n",
       "...          ...        ...        ...  ...            ...        ...  ..   \n",
       "8244           0          0          0  ...              0          0   0   \n",
       "8245           0          0          0  ...              0          0   0   \n",
       "8246           0          0          0  ...              0          0   0   \n",
       "8247           0          0          0  ...              0          0   0   \n",
       "8248           0          0          0  ...              0          0   0   \n",
       "\n",
       "      ϵtube_body  нow_body  ℎ_body  ﬁnd_body  ﬁt_body  ﬁt_title  ﬁve_body  \n",
       "0              0         0       0         0        0         0         0  \n",
       "1              0         0       0         0        0         0         0  \n",
       "2              0         0       0         0        0         0         0  \n",
       "3              0         0       0         0        0         0         0  \n",
       "4              0         0       0         0        0         0         0  \n",
       "...          ...       ...     ...       ...      ...       ...       ...  \n",
       "8244           0         0       0         0        0         0         0  \n",
       "8245           0         0       0         0        0         0         0  \n",
       "8246           0         0       0         0        0         0         0  \n",
       "8247           0         0       0         0        0         0         0  \n",
       "8248           0         0       0         0        0         0         0  \n",
       "\n",
       "[8249 rows x 52614 columns]"
      ]
     },
     "execution_count": 278,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "dtm = pd.DataFrame(sparse_dtm.toarray(), columns=countvec.get_feature_names(), index=stack_train_new.index)\n",
    "dtm"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 315,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "l_body              9849\n",
      "model_body          9056\n",
      "use_body            8756\n",
      "data_body           8062\n",
      "x_body              5858\n",
      "                    ... \n",
      "prz_body             101\n",
      "linearmodel_tag      101\n",
      "expectedvalu_tag     101\n",
      "mode_body            101\n",
      "resourc_body         101\n",
      "Length: 1174, dtype: int64\n"
     ]
    }
   ],
   "source": [
    "frequencies = dtm.sum().sort_values(ascending=False)\n",
    "print(frequencies[frequencies > 100])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 314,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAAZEAAAEGCAYAAACkQqisAAAABHNCSVQICAgIfAhkiAAAAAlwSFlzAAALEgAACxIB0t1+/AAAADh0RVh0U29mdHdhcmUAbWF0cGxvdGxpYiB2ZXJzaW9uMy4xLjEsIGh0dHA6Ly9tYXRwbG90bGliLm9yZy8QZhcZAAAVb0lEQVR4nO3df6zdd33f8eerNqGIH3NCDI1sCwdqqRjUGnobrDFVNKsSJ5twmEANKuCxTEYs0UBiHaHdFgpMg22QKisEhSaN0wIm44dioVDXC0FoEyS5JiaJcZFvQyAmWXzBCSTQBRze++N8LhxdXzvk43POzc19PqSvzvf7Pp/v9/P5xM59+Xy/3/s9qSokSerxK4s9AEnS0mWISJK6GSKSpG6GiCSpmyEiSeq2crEHMGmnn356rV+/frGHIUlLyt69e79XVavn15ddiKxfv57p6enFHoYkLSlJvr1Q3dNZkqRuhogkqZshIknqZohIkroZIpKkboaIJKmbISJJ6maISJK6GSKSpG6GiCSpmyEiSepmiEiSuo0tRJL8apJbk3w9yf4kf9rqZya5JcnBJJ9KckqrP71tz7T31w8d612t/s0k5w7Vt7TaTJJLxzUXSdLCxvlJ5FHg7Kr6LWATsCXJZuADwOVVtQF4ELiotb8IeLCqfh24vLUjyUbgQuAlwBbgI0lWJFkBfBg4D9gIvL61lSRNyNhCpAYeaZtPa0sBZwOfbvUdwAVtfWvbpr3/T5Ok1XdW1aNV9S1gBjirLTNVdXdV/QTY2dpKkiZkrNdE2ieGfcBhYA/w98BDVXW0NTkErGnra4B7Adr7PwCeO1yft8/x6guNY3uS6STTs7Ozo5iaJIkxh0hVPVZVm4C1DD45vHihZu01x3nvidYXGsdVVTVVVVOrVx/zxVySpE4TuTurqh4CvgRsBlYlmftGxbXAfW39ELAOoL3/j4Ajw/V5+xyvLkmakHHenbU6yaq2/gzg94EDwM3Aa1uzbcANbX1X26a9/8Wqqla/sN29dSawAbgVuA3Y0O72OoXBxfdd45qPJOlY4/yO9TOAHe0uql8Brq+qzyf5BrAzyfuA24GrW/urgb9KMsPgE8iFAFW1P8n1wDeAo8DFVfUYQJJLgN3ACuCaqto/xvlIkubJ4B/7y8fU1FRNT08v9jAkaUlJsreqpubX/Y11SVI3Q0SS1M0QkSR1M0QkSd0MEUlSN0NEktTNEJEkdTNEJEndDBFJUjdDRJLUzRCRJHUzRCRJ3QwRSVI3Q0SS1M0QkSR1M0QkSd0MEUlSN0NEktTNEJEkdTNEJEndDBFJUjdDRJLUzRCRJHUzRCRJ3QwRSVK3sYVIknVJbk5yIMn+JG9r9Xcn+W6SfW05f2ifdyWZSfLNJOcO1be02kySS4fqZya5JcnBJJ9Kcsq45iNJOtY4P4kcBd5RVS8GNgMXJ9nY3ru8qja15UaA9t6FwEuALcBHkqxIsgL4MHAesBF4/dBxPtCOtQF4ELhojPORJM0zthCpqvur6mtt/WHgALDmBLtsBXZW1aNV9S1gBjirLTNVdXdV/QTYCWxNEuBs4NNt/x3ABeOZjSRpIRO5JpJkPfAy4JZWuiTJHUmuSXJqq60B7h3a7VCrHa/+XOChqjo6r75Q/9uTTCeZnp2dHcGMJEkwgRBJ8izgM8Dbq+qHwJXAi4BNwP3AB+eaLrB7ddSPLVZdVVVTVTW1evXqJzgDSdLxrBznwZM8jUGAfLyqPgtQVQ8Mvf8x4PNt8xCwbmj3tcB9bX2h+veAVUlWtk8jw+0lSRMwzruzAlwNHKiqDw3Vzxhq9hrgrra+C7gwydOTnAlsAG4FbgM2tDuxTmFw8X1XVRVwM/Datv824IZxzUeSdKxxfhJ5JfBG4M4k+1rtjxncXbWJwamne4C3AFTV/iTXA99gcGfXxVX1GECSS4DdwArgmqra3473TmBnkvcBtzMILUnShGTwD/rlY2pqqqanpxd7GJK0pCTZW1VT8+v+xrokqZshIknqZohIkroZIpKkboaIJKmbISJJ6maISJK6GSKSpG6GiCSpmyEiSepmiEiSuhkikqRuhogkqZshIknqZohIkroZIpKkboaIJKmbISJJ6maISJK6GSKSpG6GiCSpmyEiSepmiEiSuhkikqRuYwuRJOuS3JzkQJL9Sd7W6qcl2ZPkYHs9tdWT5IokM0nuSPLyoWNta+0PJtk2VP/tJHe2fa5IknHNR5J0rHF+EjkKvKOqXgxsBi5OshG4FLipqjYAN7VtgPOADW3ZDlwJg9ABLgNeAZwFXDYXPK3N9qH9toxxPpKkecYWIlV1f1V9ra0/DBwA1gBbgR2t2Q7ggra+FbiuBr4KrEpyBnAusKeqjlTVg8AeYEt77zlV9ZWqKuC6oWNJkiZgItdEkqwHXgbcAjy/qu6HQdAAz2vN1gD3Du12qNVOVD+0QH2h/rcnmU4yPTs7e7LTkSQ1Yw+RJM8CPgO8vap+eKKmC9Sqo35sseqqqpqqqqnVq1c/3pAlSb+ksYZIkqcxCJCPV9VnW/mBdiqK9nq41Q8B64Z2Xwvc9zj1tQvUJUkTMs67swJcDRyoqg8NvbULmLvDahtww1D9Te0urc3AD9rprt3AOUlObRfUzwF2t/ceTrK59fWmoWNJkiZg5RiP/UrgjcCdSfa12h8D7weuT3IR8B3gde29G4HzgRngx8CbAarqSJL3Are1du+pqiNt/a3AtcAzgC+0RZI0IRnc2LR8TE1N1fT09GIPQ5KWlCR7q2pqft3fWJckdTNEJEndDBFJUjdDRJLUzRCRJHUzRCRJ3QwRSVI3Q0SS1M0QkSR1M0QkSd0MEUlSN0NEktTNEJEkdTNEJEndDBFJUjdDRJLUzRCRJHUzRCRJ3QwRSVI3Q0SS1M0QkSR1M0QkSd0MEUlSN0NEktRtbCGS5Jokh5PcNVR7d5LvJtnXlvOH3ntXkpkk30xy7lB9S6vNJLl0qH5mkluSHEzyqSSnjGsukqSFjfOTyLXAlgXql1fVprbcCJBkI3Ah8JK2z0eSrEiyAvgwcB6wEXh9awvwgXasDcCDwEVjnIskaQFjC5Gq+jJw5JdsvhXYWVWPVtW3gBngrLbMVNXdVfUTYCewNUmAs4FPt/13ABeMdAKSpMe1GNdELklyRzvddWqrrQHuHWpzqNWOV38u8FBVHZ1XlyRN0KRD5ErgRcAm4H7gg62eBdpWR31BSbYnmU4yPTs7+8RGLEk6romGSFU9UFWPVdXPgI8xOF0Fg08S64aargXuO0H9e8CqJCvn1Y/X71VVNVVVU6tXrx7NZCRJkw2RJGcMbb4GmLtzaxdwYZKnJzkT2ADcCtwGbGh3Yp3C4OL7rqoq4GbgtW3/bcANk5iDJOkXVj5+kz5JPgm8Cjg9ySHgMuBVSTYxOPV0D/AWgKran+R64BvAUeDiqnqsHecSYDewArimqva3Lt4J7EzyPuB24OpxzUWStLAM/lG/fExNTdX09PRiD0OSlpQke6tqan7d31iXJHUzRCRJ3QwRSVI3Q0SS1M0QkSR1M0QkSd0MEUlSN0NEktTNEJEkdTNEJEndDBFJUjdDRJLUzRCRJHUzRCRJ3QwRSVI3Q0SS1M0QkSR1M0QkSd0MEUlSN0NEktTNEJEkdTNEJEndDBFJUjdDRJLUzRCRJHUbW4gkuSbJ4SR3DdVOS7InycH2emqrJ8kVSWaS3JHk5UP7bGvtDybZNlT/7SR3tn2uSJJxzUWStLBxfhK5Ftgyr3YpcFNVbQBuatsA5wEb2rIduBIGoQNcBrwCOAu4bC54WpvtQ/vN70uSNGZjC5Gq+jJwZF55K7Cjre8ALhiqX1cDXwVWJTkDOBfYU1VHqupBYA+wpb33nKr6SlUVcN3QsSRJEzLpayLPr6r7Adrr81p9DXDvULtDrXai+qEF6gtKsj3JdJLp2dnZk56EJGngyXJhfaHrGdVRX1BVXVVVU1U1tXr16s4hSpLmm3SIPNBORdFeD7f6IWDdULu1wH2PU1+7QF2SNEGTDpFdwNwdVtuAG4bqb2p3aW0GftBOd+0Gzklyarugfg6wu733cJLN7a6sNw0dS5I0ISvHdeAknwReBZye5BCDu6zeD1yf5CLgO8DrWvMbgfOBGeDHwJsBqupIkvcCt7V276mquYv1b2VwB9gzgC+0RZI0QRnc3LR8TE1N1fT09GIPQ5KWlCR7q2pqfv3JcmFdkrQEGSKSpG6GiCSpmyEiSepmiEiSuhkikqRuhogkqZshIknqZohIkrotuxA5Ojv/K04kSb2WXYhIkkbHEJEkdTNEJEndDBFJUjdDRJLUzRCRJHUzRCRJ3QwRSVI3Q0SS1M0QkSR1M0QkSd0MEUlSN0NEktTNEJEkdVuUEElyT5I7k+xLMt1qpyXZk+Rgez211ZPkiiQzSe5I8vKh42xr7Q8m2bYYc5Gk5WwxP4n8XlVtqqqptn0pcFNVbQBuatsA5wEb2rIduBIGoQNcBrwCOAu4bC54JEmT8WQ6nbUV2NHWdwAXDNWvq4GvAquSnAGcC+ypqiNV9SCwB9gy6UFL0nK2WCFSwN8m2Ztke6s9v6ruB2ivz2v1NcC9Q/searXj1Y+RZHuS6STT33/khyOchiQtbysXqd9XVtV9SZ4H7EnydydomwVqdYL6scWqq4CrADa94IULtpEkPXGL8kmkqu5rr4eBzzG4pvFAO01Fez3cmh8C1g3tvha47wR1SdKETDxEkjwzybPn1oFzgLuAXcDcHVbbgBva+i7gTe0urc3AD9rprt3AOUlObRfUz2k1SdKELMbprOcDn0sy1/8nqupvktwGXJ/kIuA7wOta+xuB84EZ4MfAmwGq6kiS9wK3tXbvqaojk5uGJClVy+sSwaYXvLD2ffvuxR6GJC0pSfYO/UrGzz2ZbvGVJC0xhogkqZshIknqZohIkroZIpKkboaIJKmbISJJ6maISJK6GSKSpG6GiCSpmyEiSepmiEiSuhkikqRuhogkqZshIknqZohIkrotyxCZvfK6xR6CJD0lLMsQkSSNhiEiSepmiEiSuhkikqRuhogkqduyDZHZK3cs9hAkaclbtiEiSTp5hogkqduSD5EkW5J8M8lMkkufyL6zV/4lsx+9ZlxDk6SnvCUdIklWAB8GzgM2Aq9PsvGJHmf2o38x6qFJ0rKwcrEHcJLOAmaq6m6AJDuBrcA3nuiBZj/6MeBnP1/q5+uPUTV4HdQf49fe+h9GNX5JWtJSVYs9hm5JXgtsqap/3bbfCLyiqi6Z1247sL1tvhS4awLDOx34nn08qfp5qvQxqX6eKn1oNF5QVavnF5f6J5EsUDsmFavqKuAqgCTTVTU19oFNoJ+nSh+T6uep0sek+nmq9KHxWtLXRIBDwLqh7bXAfYs0FkladpZ6iNwGbEhyZpJTgAuBXYs8JklaNpb06ayqOprkEmA3sAK4pqr2P85uV41/ZBPr56nSx6T6ear0Mal+nip9aIyW9IV1SdLiWuqnsyRJi8gQkSR1WzYhkuSaJIeTjPx3RJLck+TOJPuSTLfa65LsT/KzJF23MC405iSnJdmT5GB7PbXVfyPJV5I8muTfnWQf707y3TaffUnOb/XnJrk5ySNJ/vwJ9LGu7Xeg/Td526jncoI+Rj2XX01ya5Kvt37+tNXPTHJLm8un2o0eJPndJF9LcrT9XtPJ9HFtkm8NzWVT73+vob5WJLk9yedHPY8T9DHyeWjxLJsQAa4Ftozx+L9XVZuG7nm/C/gXwJdP4pjXcuyYLwVuqqoNwE1tG+AI8G+B/z6CPgAub/PZVFU3ttr/A/4j8ET/Bz8KvKOqXgxsBi7O4PE0o5zL8foY9VweBc6uqt8CNgFbkmwGPtD62QA8CFzU2n8H+JfAJ0bQB8AfDc1lX6v1/tkDvA04MLQ9ynkcrw8Y/Ty0SJZNiFTVlxn8JZ1Ufweq6psneYyFxrwVmPsylB3ABa3t4aq6DfjpCPo4XtsfVdX/ZvAD+In0cX9Vfa2tP8zgB8oaRjiXE/Qx6rlUVT3SNp/WlgLOBj69wFzuqao7GDxD52T7OF77rj/7JGuBfwb8RdvOKOexUB8n0jsPLa5lEyJjVsDfJtmbwSNWxun5VXU/DH5wAs8bUz+XJLmjne46dVQHTbIeeBlwC2Oay7w+YMRzaadn9gGHgT3A3wMPVdXR1uQQJwiwnj6qam4u/7nN5fIkTz+ZPoA/A/49vwiG5zLieSzQx5xRzkOLyBAZjVdW1csZPE344iS/u9gDOklXAi9icCrlfuCDozhokmcBnwHeXlU/HMUxf4k+Rj6XqnqsqjYxeELCWcCLF2o2yj6SvBR4F/AbwO8ApwHv7D1+kn8OHK6qvcPlhYYy4j5ghPPQ4jNERqCq7muvh4HPMfjBMi4PJDkDoL0eHnUHVfVA+yH2M+BjjGA+SZ7G4If7x6vqs6080rks1Mc45jKnqh4CvsTgGsyqJHO/vDuyx+8M9bGlnbKrqnoU+EtObi6vBF6d5B5gJ4PTWH/GaOdxTB9J/nrE89AiM0ROUpJnJnn23DpwDuN9SvAuYFtb3wbcMOoO5n6wN6/hJOfTzrVfDRyoqg8NvTWyuRyvjzHMZXWSVW39GcDvM7j+cjMwd9fSyc5loT7+bihww+BaRfdcqupdVbW2qtYzeFzQF6vqD0c5j+P08YZRzkNPAlW1LBbgkwxOZ/yUwbnei0Z03BcCX2/LfuBPWv01rZ9HgQeA3aMYM4Pz1jcBB9vraa3tr7U2PwQeauvP6ezjr4A7gTsY/KA/Y6j9PQwuxD/S2m/8Jfr4JwxOi9wB7GvL+aOcywn6GPVcfhO4vR3vLuA/Df09uBWYAf4n8PRW/5127B8B3wf2n0QfX2xzuQv4a+BZJ/NnP9Tfq4DPj3oeJ+hjLPNwWZzFx55Ikrp5OkuS1M0QkSR1M0QkSd0MEUlSN0NEktTNEJFGLMmqJP9mscchTYIhIo3eKuCXDpEM+P+iliT/4kqj937gRe27Mv5bkj9Kclt74ODcd4Osz+C7Tz4CfA1Yl8F3m3ygPcjzfyU5K8mXktyd5NVtv5dk8F0j+9rxNiziPCV/2VAatfYU4c9X1UuTnMPgMSJvYfCAw13Af2Xw/Rx3A/+4qr7a9ivg/Kr6QpLPAc9k8Bj1jcCOqtqU5H8AX62qj7cvjFpRVf8w2RlKv7Dy8ZtIOgnntOX2tv0sYAODEPn2XIA0PwH+pq3fCTxaVT9NciewvtW/AvxJ+56Oz1bVwTGPXzohT2dJ4xXgv9QvvsXv16vq6vbej+a1/Wn94tTAzxg8d40aPIF4ZVv/BPBq4B+A3UnOHvsMpBMwRKTRexh4dlvfDfyr9j0nJFmTpPvLt5K8ELi7qq5gcGrsN092sNLJ8HSWNGJV9f0k/yfJXcAXGHwv+VcGTz7nEeANwGOdh/8D4A1Jfgr8X+A9Ixiy1M0L65Kkbp7OkiR1M0QkSd0MEUlSN0NEktTNEJEkdTNEJEndDBFJUrf/D+vboIBrezd+AAAAAElFTkSuQmCC\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "import matplotlib.pyplot as plt\n",
    "plt.figure(figsize=(8,6))\n",
    "\n",
    "ax = sns.countplot(frequencies)\n",
    "plt.xticks(np.arange(1, 500, step=50), np.arange(1, 500, step=50))\n",
    "\n",
    "# freq = pd.DataFrame(frequencies, columns=['Frequencies']).transpose()\n",
    "# ax = sns.countplot(freq)\n",
    "# ax = sns.distplot(frequencies, bins=len(frequencies))\n",
    "# ax = plt.hist(frequencies[frequencies > 50])\n",
    "\n",
    "plt.xlabel('terms')\n",
    "plt.ylabel(' ')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 317,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "l_body               9849\n",
       "model_body           9056\n",
       "use_body             8756\n",
       "data_body            8062\n",
       "x_body               5858\n",
       "                     ... \n",
       "datatransform_tag      86\n",
       "unfortun_body          86\n",
       "randomforest_tag       85\n",
       "optim_title            85\n",
       "averag_title           84\n",
       "Length: 1081, dtype: int64"
      ]
     },
     "execution_count": 317,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# 1% of the text or more:\n",
    "\n",
    "countvec2 = CountVectorizer(min_df=0.01)\n",
    "sparse_dtm2 = countvec2.fit_transform(stack_train_new['text'])\n",
    "\n",
    "dtm2 = pd.DataFrame(sparse_dtm2.toarray(), columns=countvec2.get_feature_names(), index=stack_train_new.index)\n",
    "dtm2.sum().sort_values(ascending=False) \n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 322,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "model_body            9056\n",
       "use_body              8756\n",
       "data_body             8062\n",
       "x_body                5858\n",
       "variabl_body          5711\n",
       "                      ... \n",
       "neuralnetwork_tag      463\n",
       "far_body               453\n",
       "estim_title            439\n",
       "advanc_body            431\n",
       "hypothesistest_tag     426\n",
       "Length: 227, dtype: int64"
      ]
     },
     "execution_count": 322,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# 5% of the text or more:\n",
    "\n",
    "countvec3 = CountVectorizer(min_df=0.05)\n",
    "sparse_dtm3 = countvec3.fit_transform(stack_train_new['text'])\n",
    "\n",
    "dtm3 = pd.DataFrame(sparse_dtm3.toarray(), columns=countvec3.get_feature_names(), index=stack_train_new.index)\n",
    "dtm3.sum().sort_values(ascending=False) \n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 323,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "model_body         9056\n",
       "use_body           8756\n",
       "data_body          8062\n",
       "x_body             5858\n",
       "variabl_body       5711\n",
       "                   ... \n",
       "suppos_body         748\n",
       "appreci_body        737\n",
       "found_body          734\n",
       "test_title          687\n",
       "distribut_title     670\n",
       "Length: 131, dtype: int64"
      ]
     },
     "execution_count": 323,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# 7.5% of the text or more:\n",
    "\n",
    "countvec4 = CountVectorizer(min_df=0.075)\n",
    "sparse_dtm4 = countvec4.fit_transform(stack_train_new['text'])\n",
    "\n",
    "dtm4 = pd.DataFrame(sparse_dtm4.toarray(), columns=countvec4.get_feature_names(), index=stack_train_new.index)\n",
    "dtm4.sum().sort_values(ascending=False) \n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 324,
   "metadata": {},
   "outputs": [],
   "source": [
    "#b)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 325,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "((5774, 131), (2475, 131))"
      ]
     },
     "execution_count": 325,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "from sklearn.model_selection import train_test_split\n",
    "\n",
    "y = stack_train_new['score>=1'].astype('int32')\n",
    "X = dtm4\n",
    "\n",
    "X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, stratify=y, random_state=88)\n",
    "X_train.shape, X_test.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 326,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "0    2958\n",
      "1    2816\n",
      "Name: score>=1, dtype: int64\n",
      "0    1268\n",
      "1    1207\n",
      "Name: score>=1, dtype: int64\n"
     ]
    }
   ],
   "source": [
    "print(y_train.value_counts())\n",
    "print(y_test.value_counts())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 328,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "ACC 0.5123232323232323\n"
     ]
    }
   ],
   "source": [
    "# Baseline accuracy\n",
    "print('ACC', 1268/(1268 + 1207))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Logistic Regression"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 331,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "LogisticRegression(random_state=88)"
      ]
     },
     "execution_count": 331,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "from sklearn.metrics import confusion_matrix\n",
    "from sklearn.metrics import accuracy_score\n",
    "\n",
    "from sklearn.linear_model import LogisticRegression\n",
    "\n",
    "logreg = LogisticRegression(random_state=88)\n",
    "logreg.fit(X_train, y_train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 332,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Confusion Matrix: \n",
      " [[832 436]\n",
      " [651 556]]\n",
      "\n",
      "Accuracy: 0.5608080808080808\n"
     ]
    }
   ],
   "source": [
    "y_prob = logreg.predict_proba(X_test)\n",
    "y_pred = pd.Series([1 if x > 0.5 else 0 for x in y_prob[:,1]], index=y_test.index)\n",
    "\n",
    "cm = confusion_matrix(y_test, y_pred)\n",
    "print (\"Confusion Matrix: \\n\", cm)\n",
    "acc_log=accuracy_score(y_test, y_pred)\n",
    "print (\"\\nAccuracy:\", acc_log)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Decision Tree Classifier \n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 334,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "DecisionTreeClassifier(random_state=88)"
      ]
     },
     "execution_count": 334,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "from sklearn.model_selection import GridSearchCV\n",
    "from sklearn.tree import DecisionTreeClassifier\n",
    "\n",
    "#grid_values = {'ccp_alpha': np.linspace(0, 0.1, 101)}\n",
    "\n",
    "dtc = DecisionTreeClassifier(random_state=88)\n",
    "dtc.fit(X_train, y_train)\n",
    "#dtc_cv = GridSearchCV(dtc, param_grid=grid_values, cv=10).fit(X_train, y_train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 337,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Confusion Matrix: \n",
      " [[654 614]\n",
      " [586 621]]\n",
      "\n",
      "Accuracy: 0.5151515151515151\n"
     ]
    }
   ],
   "source": [
    "y_pred_cart = dtc.predict(X_test)\n",
    "cm = confusion_matrix(y_test, y_pred_cart)\n",
    "print (\"Confusion Matrix: \\n\", cm)\n",
    "acc_cart=accuracy_score(y_test, y_pred_cart)\n",
    "print (\"\\nAccuracy:\", acc_cart)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Random Forest"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 338,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "RandomForestClassifier(max_features=5, min_samples_leaf=5, n_estimators=500,\n",
       "                       random_state=88)"
      ]
     },
     "execution_count": 338,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "from sklearn.ensemble import RandomForestClassifier\n",
    "\n",
    "rf = RandomForestClassifier(max_features=5, min_samples_leaf=5, n_estimators=500, random_state=88)\n",
    "rf.fit(X_train, y_train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 339,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Confusion Matrix: \n",
      " [[831 437]\n",
      " [656 551]]\n",
      "\n",
      "Accuracy: 0.5583838383838384\n"
     ]
    }
   ],
   "source": [
    "y_pred_rand = rf.predict(X_test)\n",
    "cm = confusion_matrix(y_test, y_pred_rand)\n",
    "print (\"Confusion Matrix: \\n\", cm)\n",
    "acc_rand=accuracy_score(y_test, y_pred_rand)\n",
    "print (\"\\nAccuracy:\", acc_rand)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Boosting"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 342,
   "metadata": {},
   "outputs": [
    {
     "ename": "KeyboardInterrupt",
     "evalue": "",
     "output_type": "error",
     "traceback": [
      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[0;31mKeyboardInterrupt\u001b[0m                         Traceback (most recent call last)",
      "\u001b[0;32m<ipython-input-342-cbf31540b4a0>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[1;32m     13\u001b[0m \u001b[0mgbc\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mGradientBoostingClassifier\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     14\u001b[0m \u001b[0mgbc_cv\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mGridSearchCV\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mgbc\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mparam_grid\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mgrid_values\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mcv\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;36m5\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 15\u001b[0;31m \u001b[0mgbc_cv\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mfit\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mX_train\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0my_train\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     16\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     17\u001b[0m \u001b[0mtoc\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mtime\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mtime\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m~/opt/anaconda3/lib/python3.7/site-packages/sklearn/model_selection/_search.py\u001b[0m in \u001b[0;36mfit\u001b[0;34m(self, X, y, groups, **fit_params)\u001b[0m\n\u001b[1;32m    889\u001b[0m                 \u001b[0;32mreturn\u001b[0m \u001b[0mresults\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    890\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 891\u001b[0;31m             \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_run_search\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mevaluate_candidates\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    892\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    893\u001b[0m             \u001b[0;31m# multimetric is determined here because in the case of a callable\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m~/opt/anaconda3/lib/python3.7/site-packages/sklearn/model_selection/_search.py\u001b[0m in \u001b[0;36m_run_search\u001b[0;34m(self, evaluate_candidates)\u001b[0m\n\u001b[1;32m   1390\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0m_run_search\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mevaluate_candidates\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1391\u001b[0m         \u001b[0;34m\"\"\"Search all candidates in param_grid\"\"\"\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1392\u001b[0;31m         \u001b[0mevaluate_candidates\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mParameterGrid\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mparam_grid\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1393\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1394\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m~/opt/anaconda3/lib/python3.7/site-packages/sklearn/model_selection/_search.py\u001b[0m in \u001b[0;36mevaluate_candidates\u001b[0;34m(candidate_params, cv, more_results)\u001b[0m\n\u001b[1;32m    849\u001b[0m                     )\n\u001b[1;32m    850\u001b[0m                     for (cand_idx, parameters), (split_idx, (train, test)) in product(\n\u001b[0;32m--> 851\u001b[0;31m                         \u001b[0menumerate\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mcandidate_params\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0menumerate\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mcv\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0msplit\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mX\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0my\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mgroups\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    852\u001b[0m                     )\n\u001b[1;32m    853\u001b[0m                 )\n",
      "\u001b[0;32m~/opt/anaconda3/lib/python3.7/site-packages/joblib/parallel.py\u001b[0m in \u001b[0;36m__call__\u001b[0;34m(self, iterable)\u001b[0m\n\u001b[1;32m    922\u001b[0m                 \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_iterating\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_original_iterator\u001b[0m \u001b[0;32mis\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    923\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 924\u001b[0;31m             \u001b[0;32mwhile\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mdispatch_one_batch\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0miterator\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    925\u001b[0m                 \u001b[0;32mpass\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    926\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m~/opt/anaconda3/lib/python3.7/site-packages/joblib/parallel.py\u001b[0m in \u001b[0;36mdispatch_one_batch\u001b[0;34m(self, iterator)\u001b[0m\n\u001b[1;32m    757\u001b[0m                 \u001b[0;32mreturn\u001b[0m \u001b[0;32mFalse\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    758\u001b[0m             \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 759\u001b[0;31m                 \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_dispatch\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mtasks\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    760\u001b[0m                 \u001b[0;32mreturn\u001b[0m \u001b[0;32mTrue\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    761\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m~/opt/anaconda3/lib/python3.7/site-packages/joblib/parallel.py\u001b[0m in \u001b[0;36m_dispatch\u001b[0;34m(self, batch)\u001b[0m\n\u001b[1;32m    714\u001b[0m         \u001b[0;32mwith\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_lock\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    715\u001b[0m             \u001b[0mjob_idx\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mlen\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_jobs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 716\u001b[0;31m             \u001b[0mjob\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_backend\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mapply_async\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mbatch\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mcallback\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mcb\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    717\u001b[0m             \u001b[0;31m# A job can complete so quickly than its callback is\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    718\u001b[0m             \u001b[0;31m# called before we get here, causing self._jobs to\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m~/opt/anaconda3/lib/python3.7/site-packages/joblib/_parallel_backends.py\u001b[0m in \u001b[0;36mapply_async\u001b[0;34m(self, func, callback)\u001b[0m\n\u001b[1;32m    180\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0mapply_async\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mfunc\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mcallback\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;32mNone\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    181\u001b[0m         \u001b[0;34m\"\"\"Schedule a func to be run\"\"\"\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 182\u001b[0;31m         \u001b[0mresult\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mImmediateResult\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mfunc\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    183\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0mcallback\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    184\u001b[0m             \u001b[0mcallback\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mresult\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m~/opt/anaconda3/lib/python3.7/site-packages/joblib/_parallel_backends.py\u001b[0m in \u001b[0;36m__init__\u001b[0;34m(self, batch)\u001b[0m\n\u001b[1;32m    547\u001b[0m         \u001b[0;31m# Don't delay the application, to avoid keeping the input\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    548\u001b[0m         \u001b[0;31m# arguments in memory\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 549\u001b[0;31m         \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mresults\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mbatch\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    550\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    551\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0mget\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m~/opt/anaconda3/lib/python3.7/site-packages/joblib/parallel.py\u001b[0m in \u001b[0;36m__call__\u001b[0;34m(self)\u001b[0m\n\u001b[1;32m    223\u001b[0m         \u001b[0;32mwith\u001b[0m \u001b[0mparallel_backend\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_backend\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mn_jobs\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_n_jobs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    224\u001b[0m             return [func(*args, **kwargs)\n\u001b[0;32m--> 225\u001b[0;31m                     for func, args, kwargs in self.items]\n\u001b[0m\u001b[1;32m    226\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    227\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0m__len__\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m~/opt/anaconda3/lib/python3.7/site-packages/joblib/parallel.py\u001b[0m in \u001b[0;36m<listcomp>\u001b[0;34m(.0)\u001b[0m\n\u001b[1;32m    223\u001b[0m         \u001b[0;32mwith\u001b[0m \u001b[0mparallel_backend\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_backend\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mn_jobs\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_n_jobs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    224\u001b[0m             return [func(*args, **kwargs)\n\u001b[0;32m--> 225\u001b[0;31m                     for func, args, kwargs in self.items]\n\u001b[0m\u001b[1;32m    226\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    227\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0m__len__\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m~/opt/anaconda3/lib/python3.7/site-packages/sklearn/utils/fixes.py\u001b[0m in \u001b[0;36m__call__\u001b[0;34m(self, *args, **kwargs)\u001b[0m\n\u001b[1;32m    207\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0m__call__\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m*\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    208\u001b[0m         \u001b[0;32mwith\u001b[0m \u001b[0mconfig_context\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m**\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mconfig\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 209\u001b[0;31m             \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mfunction\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    210\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    211\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m~/opt/anaconda3/lib/python3.7/site-packages/sklearn/model_selection/_validation.py\u001b[0m in \u001b[0;36m_fit_and_score\u001b[0;34m(estimator, X, y, scorer, train, test, verbose, parameters, fit_params, return_train_score, return_parameters, return_n_test_samples, return_times, return_estimator, split_progress, candidate_progress, error_score)\u001b[0m\n\u001b[1;32m    679\u001b[0m             \u001b[0mestimator\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mfit\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mX_train\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mfit_params\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    680\u001b[0m         \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 681\u001b[0;31m             \u001b[0mestimator\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mfit\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mX_train\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0my_train\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mfit_params\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    682\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    683\u001b[0m     \u001b[0;32mexcept\u001b[0m \u001b[0mException\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m~/opt/anaconda3/lib/python3.7/site-packages/sklearn/ensemble/_gb.py\u001b[0m in \u001b[0;36mfit\u001b[0;34m(self, X, y, sample_weight, monitor)\u001b[0m\n\u001b[1;32m    594\u001b[0m             \u001b[0msample_weight_val\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    595\u001b[0m             \u001b[0mbegin_at_stage\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 596\u001b[0;31m             \u001b[0mmonitor\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    597\u001b[0m         )\n\u001b[1;32m    598\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m~/opt/anaconda3/lib/python3.7/site-packages/sklearn/ensemble/_gb.py\u001b[0m in \u001b[0;36m_fit_stages\u001b[0;34m(self, X, y, raw_predictions, sample_weight, random_state, X_val, y_val, sample_weight_val, begin_at_stage, monitor)\u001b[0m\n\u001b[1;32m    670\u001b[0m                 \u001b[0mrandom_state\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    671\u001b[0m                 \u001b[0mX_csc\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 672\u001b[0;31m                 \u001b[0mX_csr\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    673\u001b[0m             )\n\u001b[1;32m    674\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m~/opt/anaconda3/lib/python3.7/site-packages/sklearn/ensemble/_gb.py\u001b[0m in \u001b[0;36m_fit_stage\u001b[0;34m(self, i, X, y, raw_predictions, sample_weight, sample_mask, random_state, X_csc, X_csr)\u001b[0m\n\u001b[1;32m    244\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    245\u001b[0m             \u001b[0mX\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mX_csr\u001b[0m \u001b[0;32mif\u001b[0m \u001b[0mX_csr\u001b[0m \u001b[0;32mis\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0;32mNone\u001b[0m \u001b[0;32melse\u001b[0m \u001b[0mX\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 246\u001b[0;31m             \u001b[0mtree\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mfit\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mX\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mresidual\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0msample_weight\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0msample_weight\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mcheck_input\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;32mFalse\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    247\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    248\u001b[0m             \u001b[0;31m# update tree leaves\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m~/opt/anaconda3/lib/python3.7/site-packages/sklearn/tree/_classes.py\u001b[0m in \u001b[0;36mfit\u001b[0;34m(self, X, y, sample_weight, check_input, X_idx_sorted)\u001b[0m\n\u001b[1;32m   1318\u001b[0m             \u001b[0msample_weight\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0msample_weight\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1319\u001b[0m             \u001b[0mcheck_input\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mcheck_input\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1320\u001b[0;31m             \u001b[0mX_idx_sorted\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mX_idx_sorted\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1321\u001b[0m         )\n\u001b[1;32m   1322\u001b[0m         \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m~/opt/anaconda3/lib/python3.7/site-packages/sklearn/tree/_classes.py\u001b[0m in \u001b[0;36mfit\u001b[0;34m(self, X, y, sample_weight, check_input, X_idx_sorted)\u001b[0m\n\u001b[1;32m    418\u001b[0m             )\n\u001b[1;32m    419\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 420\u001b[0;31m         \u001b[0mbuilder\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mbuild\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mtree_\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mX\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0my\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0msample_weight\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    421\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    422\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mn_outputs_\u001b[0m \u001b[0;34m==\u001b[0m \u001b[0;36m1\u001b[0m \u001b[0;32mand\u001b[0m \u001b[0mis_classifier\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;31mKeyboardInterrupt\u001b[0m: "
     ]
    }
   ],
   "source": [
    "import time\n",
    "from sklearn.ensemble import GradientBoostingClassifier\n",
    "\n",
    "grid_values = {'n_estimators': np.linspace(100, 5000, 50, dtype='int32'),  # np.logspace(6, 12, num=7, base=2, dtype='int32'),\n",
    "               'learning_rate': [0.01],\n",
    "               'max_leaf_nodes': np.linspace(2, 10, 8, dtype='int32'),\n",
    "               'max_depth': [100],\n",
    "               'min_samples_leaf': [10],\n",
    "               'random_state': [88]} \n",
    "\n",
    "tic = time.time()\n",
    "\n",
    "gbc = GradientBoostingClassifier()\n",
    "gbc_cv = GridSearchCV(gbc, param_grid=grid_values, cv=5)\n",
    "gbc_cv.fit(X_train, y_train)\n",
    "\n",
    "toc = time.time()\n",
    "\n",
    "print('time:', round(toc-tic, 2),'s')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "n_estimators = gbc_cv.cv_results_['param_n_estimators'].data\n",
    "cv_acc_scores = gbc_cv.cv_results_['mean_test_score']\n",
    "\n",
    "plt.figure(figsize=(12, 8))\n",
    "plt.xlabel('n estimators', fontsize=16)\n",
    "plt.ylabel('CV Accuracy', fontsize=16)\n",
    "plt.grid(True, which='both')\n",
    "\n",
    "N = len(grid_values['max_leaf_nodes'])\n",
    "M = len(grid_values['n_estimators'])\n",
    "for i in range(N):\n",
    "    plt.scatter(n_estimators[(M*i):(M*i)+M], cv_acc_scores[(M*i):(M*i)+M], s=30)\n",
    "    plt.plot(n_estimators[(M*i):(M*i)+M], cv_acc_scores[(M*i):(M*i)+M], linewidth=2,\n",
    "             label='max leaf nodes = '+str(grid_values['max_leaf_nodes'][i]))\n",
    "plt.legend(loc='lower right')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "y_pred_boost = gbc_cv.predict(X_test)\n",
    "cm = confusion_matrix(y_test, y_pred_boost)\n",
    "print (\"Confusion Matrix: \\n\", cm)\n",
    "acc_boost=accuracy_score(y_test, y_pred_boost)\n",
    "print (\"\\nAccuracy:\", acc_boost)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "#comparison table\n",
    "data = {'metric_name':['Accuracy'], 'CART':[acc_cart],'Logistic':[acc_log],'Random Forest':[acc_rand],'Boosting':[acc_boost]}\n",
    "performance_table = pd.DataFrame(data2)\n",
    "performance_table\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# bootsrap"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "#building the validation function\n",
    "\n",
    "import time\n",
    "def bootstrap_validation(test_data, test_label, model, metrics_list, sample=500, random_state=66):\n",
    "    tic = time.time()\n",
    "    n_sample = sample\n",
    "    n_metrics = len(metrics_list)\n",
    "    output_array=np.zeros([n_sample, n_metrics])\n",
    "    output_array[:]=np.nan\n",
    "    print(output_array.shape)\n",
    "    for bs_iter in range(n_sample):\n",
    "        bs_index = np.random.choice(test_data.index, len(test_data.index), replace=True)\n",
    "        bs_data = test_data.loc[bs_index]\n",
    "        bs_label = test_label.loc[bs_index]\n",
    "        bs_predicted = model.predict(bs_data)\n",
    "        for metrics_iter in range(n_metrics):\n",
    "            metrics = metrics_list[metrics_iter]\n",
    "            output_array[bs_iter, metrics_iter]=metrics(bs_label, bs_predicted)\n",
    "#         if bs_iter % 100 == 0:\n",
    "#             print(bs_iter, time.time()-tic)\n",
    "    output_df = pd.DataFrame(output_array)\n",
    "    return output_df"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "#for SOME model\n",
    "bs_output = bootstrap_validation(X_test_b,y_test_b,best_dtc,\n",
    "                                 metrics_list=[accuracy_score],\n",
    "                                 sample = 5000)\n",
    "\n",
    "#visualization\n",
    "test_accuracy = accuracy_score(y_test_b, y_pred_cart2)\n",
    "\n",
    "fig, axs = plt.subplots(ncols=2, figsize=(12,5))\n",
    "axs[0].set_xlabel('Bootstrap Acc Estimates', fontsize=16)\n",
    "axs[1].set_xlabel('Boot Acc - Test Set Acc', fontsize=16)\n",
    "axs[0].set_ylabel('Count', fontsize=16)\n",
    "axs[0].hist(bs_output.iloc[:,0], bins=20,edgecolor='green', linewidth=2,color = \"grey\")\n",
    "#axs[0].set_xlim([0.88,0.95])\n",
    "axs[1].hist(bs_output.iloc[:,0]-test_accuracy, bins=20,edgecolor='green', linewidth=2,color = \"grey\")\n",
    "#axs[1].set_xlim([0,1])\n",
    "\n",
    "# The 95% confidence interval\n",
    "CI_cart= np.quantile(bs_output.iloc[:,0],np.array([0.025,0.975]))\n",
    "print(\"The 95-percent confidence interval of accuracy score is %s\" % CI_cart)"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.4"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
